---
title: "Local stability"
format:
  revealjs:
    smaller: true
    scrollable: true
---

```{r packages, echo = FALSE}
# install.packages('deSolve', dependencies = TRUE) # use to install if needed
library(deSolve)
```


## System Potential

<p style="text-align: center;">
System potential : $\phi = -\int_{-\infty}^{\infty} f(N) dN$
</p>

```{r potentialLogistic, fig.width = 3.5, fig.height = 3, fig.align = 'center'}
par(mar = c(3, 3, 1, 1),
    las = 1,
    cex.axis = 0.8,
    mgp = c(2, 0.3, 0),
    tcl = -0.2,
    mfrow = c(1,1))

# System potential continuous logistic
phi <- function(x){ - r * ( (x^2 / 2) - (x^3 / (3 * K) ) ) }

r = 1
K = 10

curve(phi, 0, 15,
      axes = FALSE,
      ann = FALSE)
box(lwd = 1)
title( ylab = expression(paste('System potential ', (italic(phi)))),
       xlab = 'Population size (N)',
       line = 1.75)
axis(1, at = c(0, K), labels = c(0, 'K'))
points(c(0, K), 
       c(phi(0), phi(K)) + 0.25,
       cex = 1.5,
       pch = 19)

```

## Taylor approximation
```{r TaylorExpansion, fig.width = 5, fig.height = 4}
###############################
# Taylor expansion example
##########################

pfunc <- function(x) {
  a + 
    b * x + 
      c * x ^ 2 + 
        d * x ^ 3 + 
          e * x ^ 4
}
a = -1
b = 3.24
c = 5.23
d = 2.8
e = 0.38


par(
  mar = c(3, 3.5, 1, 1),
  lwd = 2,
  cex = 0.8,
  las = 1,
  bty = "l",
  mgp = c(2, 0.4, 0),
  cex.lab = 1.5
)

x <- seq(-3, 2, 1)
curve(
  pfunc(x),
  xlim = c(-3, 2),
  ylim = c(-15, 15),
  lwd = 3,
  xlab = 'Population size (N)',
  ylab = "f(N)",
  axes = FALSE
)
box(lwd = 3)
axis(1, at = 0, label = 'N*', cex = 2)
points(
  0,
  a,
  pch = 21,
  lwd = 2,
  cex = 3,
  bg = "red"
)


```

## Taylor approximation
```{r TaylorExpansion2, fig.width = 5, fig.height = 4}
###############################
# Taylor expansion example
##########################

pfunc <- function(x) {
  a + 
    b * x + 
      c * x ^ 2 + 
        d * x ^ 3 + 
          e * x ^ 4
}
a = -1
b = 3.24
c = 5.23
d = 2.8
e = 0.38


par(
  mar = c(3, 3.5, 1, 1),
  lwd = 2,
  cex = 0.8,
  las = 1,
  bty = "l",
  mgp = c(2, 0.4, 0),
  cex.lab = 1.5
)

x <- seq(-3, 2, 1)
curve(
  pfunc(x),
  xlim = c(-3, 2),
  ylim = c(-15, 15),
  lwd = 3,
  xlab = 'Population size (N)',
  ylab = "f(N)",
  axes = FALSE
)
box(lwd = 3)
axis(1, at = 0, label = 'N*', cex = 2)
points(
  0,
  a,
  pch = 21,
  lwd = 2,
  cex = 3,
  bg = "red"
)

# ~~~~~~~~~~~~~~~~~~~


legend(
  "bottomright",
  c(
    "f(N)",
    "constant:      f(N*)",
    expression(
      linear: ~  ~  ~  ~  ~  ~  ~  ~  ~  ~ 
        f("N*") + 
          f * minute("N*") * n),
    expression(
      quadratic: ~  ~  ~ 
        f("N*") + 
          f * minute("N*") * x + 
           (f * second("N*") / 2) * x ^ 2),
    expression(
      cubic: ~  ~  ~  ~  ~  ~  ~  ~  ~  ~ 
        f("N*") + 
          f * minute("N*") * x + 
            (f * second("N*") / 2) * x ^ 2 + 
              (f * minute * second("N*") / 6) * x ^ 3
    )
  ),
  lty = c(1, 2, 1, 4, 5),
  lwd = c(3, rep(2, 4)),
  cex = 1,
  bty = "n",
  col = c('black', 'grey', 'red', 'grey', 'grey')
)


# ~~~~~~~~~~~~~~~~~~~

abline(h = a,
       lty = 2,
       col = 'grey',
       lwd = 2)


```

## Taylor approximation
```{r TaylorExpansion3, fig.width = 5, fig.height = 4}
###############################
# Taylor expansion example
##########################

pfunc <- function(x) {
  a + 
    b * x + 
      c * x ^ 2 + 
        d * x ^ 3 + 
          e * x ^ 4
}
a = -1
b = 3.24
c = 5.23
d = 2.8
e = 0.38


par(
  mar = c(3, 3.5, 1, 1),
  lwd = 2,
  cex = 0.8,
  las = 1,
  bty = "l",
  mgp = c(2, 0.4, 0),
  cex.lab = 1.5
)

x <- seq(-3, 2, 1)
curve(
  pfunc(x),
  xlim = c(-3, 2),
  ylim = c(-15, 15),
  lwd = 3,
  xlab = 'Population size (N)',
  ylab = "f(N)",
  axes = FALSE
)
box(lwd = 3)
axis(1, at = 0, label = 'N*', cex = 2)
points(
  0,
  a,
  pch = 21,
  lwd = 2,
  cex = 3,
  bg = "red"
)

# ~~~~~~~~~~~~~~~~~~~


legend(
  "bottomright",
  c(
    "f(N)",
    "constant:      f(N*)",
    expression(
      linear: ~  ~  ~  ~  ~  ~  ~  ~  ~  ~ 
        f("N*") + 
          f * minute("N*") * n),
    expression(
      quadratic: ~  ~  ~ 
        f("N*") + 
          f * minute("N*") * x + 
           (f * second("N*") / 2) * x ^ 2),
    expression(
      cubic: ~  ~  ~  ~  ~  ~  ~  ~  ~  ~ 
        f("N*") + 
          f * minute("N*") * x + 
            (f * second("N*") / 2) * x ^ 2 + 
              (f * minute * second("N*") / 6) * x ^ 3
    )
  ),
  lty = c(1, 2, 1, 4, 5),
  lwd = c(3, rep(2, 4)),
  cex = 1,
  bty = "n",
  col = c('black', 'grey', 'grey', 'grey', 'grey')
)


# ~~~~~~~~~~~~~~~~~~~

abline(h = a,
       lty = 2,
       col = 'grey',
       lwd = 2)


curve(
  a + b * x,
  lty = 1,
  add = TRUE,
  col = 'grey',
  lwd = 1,
  lend = 2
)




```

## Taylor approximation
```{r TaylorExpansion4, fig.width = 5, fig.height = 4}
###############################
# Taylor expansion example
##########################

pfunc <- function(x) {
  a + 
    b * x + 
      c * x ^ 2 + 
        d * x ^ 3 + 
          e * x ^ 4
}
a = -1
b = 3.24
c = 5.23
d = 2.8
e = 0.38


par(
  mar = c(3, 3.5, 1, 1),
  lwd = 2,
  cex = 0.8,
  las = 1,
  bty = "l",
  mgp = c(2, 0.4, 0),
  cex.lab = 1.5
)

x <- seq(-3, 2, 1)
curve(
  pfunc(x),
  xlim = c(-3, 2),
  ylim = c(-15, 15),
  lwd = 3,
  xlab = 'Population size (N)',
  ylab = "f(N)",
  axes = FALSE
)
box(lwd = 3)
axis(1, at = 0, label = 'N*', cex = 2)
points(
  0,
  a,
  pch = 21,
  lwd = 2,
  cex = 3,
  bg = "red"
)

# ~~~~~~~~~~~~~~~~~~~


legend(
  "bottomright",
  c(
    "f(N)",
    "constant:      f(N*)",
    expression(
      linear: ~  ~  ~  ~  ~  ~  ~  ~  ~  ~ 
        f("N*") + 
          f * minute("N*") * n),
    expression(
      quadratic: ~  ~  ~ 
        f("N*") + 
          f * minute("N*") * x + 
           (f * second("N*") / 2) * x ^ 2),
    expression(
      cubic: ~  ~  ~  ~  ~  ~  ~  ~  ~  ~ 
        f("N*") + 
          f * minute("N*") * x + 
            (f * second("N*") / 2) * x ^ 2 + 
              (f * minute * second("N*") / 6) * x ^ 3
    )
  ),
  lty = c(1, 2, 1, 4, 5),
  lwd = c(3, rep(2, 4)),
  cex = 1,
  bty = "n",
  col = c('black', 'grey', 'grey', 'grey', 'grey')
)


# ~~~~~~~~~~~~~~~~~~~

abline(h = a,
       lty = 2,
       col = 'grey',
       lwd = 2)


curve(
  a + b * x,
  lty = 1,
  add = TRUE,
  col = 'grey',
  lwd = 1,
  lend = 2
)


curve(
  a + b * x + c * x ^ 2,
  lty = 4,
  add = TRUE,
  col = 'grey',
  lwd = 2
)


curve(
  a + b * x + c * x ^ 2 + d * x ^ 3,
  lty = 5,
  add = TRUE,
  col = 'grey',
  lwd = 2
)

```

## Taylor approximation
:::: {.columns}

::: {.column width="70%"}
```{r TaylorExpansion5, fig.width = 5, fig.height = 4}
###############################
# Taylor expansion example
##########################

pfunc <- function(x) {
  a + 
    b * x + 
      c * x ^ 2 + 
        d * x ^ 3 + 
          e * x ^ 4
}
a = -1
b = 3.24
c = 5.23
d = 2.8
e = 0.38


par(
  mar = c(3, 3.5, 1, 1),
  lwd = 2,
  cex = 0.8,
  las = 1,
  bty = "l",
  mgp = c(2, 0.4, 0),
  cex.lab = 1.5
)

x <- seq(-3, 2, 1)
curve(
  pfunc(x),
  xlim = c(-3, 2),
  ylim = c(-15, 15),
  lwd = 3,
  xlab = 'Population size (N)',
  ylab = "f(N)",
  axes = FALSE
)
box(lwd = 3)
axis(1, at = 0, label = 'N*', cex = 2)
points(
  0,
  a,
  pch = 21,
  lwd = 2,
  cex = 3,
  bg = "red"
)

# ~~~~~~~~~~~~~~~~~~~


legend(
  "bottomright",
  c(
    "f(N)",
    "constant:      f(N*)",
    expression(
      linear: ~  ~  ~  ~  ~  ~  ~  ~  ~  ~ 
        f("N*") + 
          f * minute("N*") * n),
    expression(
      quadratic: ~  ~  ~ 
        f("N*") + 
          f * minute("N*") * x + 
           (f * second("N*") / 2) * x ^ 2),
    expression(
      cubic: ~  ~  ~  ~  ~  ~  ~  ~  ~  ~ 
        f("N*") + 
          f * minute("N*") * x + 
            (f * second("N*") / 2) * x ^ 2 + 
              (f * minute * second("N*") / 6) * x ^ 3
    )
  ),
  lty = c(1, 2, 1, 4, 5),
  lwd = c(3, rep(2, 4)),
  cex = 1,
  bty = "n",
  col = c('black', 'grey', 'red', 'grey', 'grey')
)


# ~~~~~~~~~~~~~~~~~~~

abline(h = a,
       lty = 2,
       col = 'grey',
       lwd = 2)


curve(
  a + b * x,
  lty = 1,
  add = TRUE,
  col = 'red',
  lwd = 2,
  lend = 2
)

```

:::

::: {.column width="30%"}

$$
\boxed{\lambda = \frac{d \; f(N^*)}{dN} < 0}
$$ 
:::
::::